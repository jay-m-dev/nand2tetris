// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    // found a more optimal solution using fewer chips.
    // I'm leaving my original solution below for reference
    Inc16(in=inMem, out=inMemPlus1);
    Mux16(a=inMem, b=inMemPlus1, sel=inc, out=inMemInc);
    Mux16(a=inMemInc, b=in, sel=load, out=inMemLoad);
    Mux16(a=inMemLoad, b=false, sel=reset, out=inMain);
    // load can be made true, since the inMem value is being propagated throughout the chips
    Register(in=inMain, load=true, out=inMem, out=out);


    // My solution below consists of some redundant chips, more optimal solution above
    // This one hasn't been easy to implement.
    // The idea I struggled with the most is that in sequential logic
    // the state of the output is changed until the NEXT clock cycle.
    // it looks like there's an operational precedence at play here.
    // reset > load > inc
    // another important assumption is that whenever inc or reset are true,
    // load must be set to true, no matter what the input load is
    // the trick was to use Mux16 chips to select between one value or another
    // AND to propagate the selected value into the next Mux16
    // Mux16(a=inMem, b=false, sel=reset, out=outReset);                // choose between existing value or reset value
    // Inc16(in=inMem, out=inMemPlus1);                                 // increase value in mem
    // Mux16(a=inMem, b=inMemPlus1, sel=inc, out=inMemInc);             // choose between existing value or increased value
    // // ensure that loadIn is set to true whenever either inc or reset are true
    // Or(a=reset, b=load, out=loadOrReset);
    // Or(a=inc, b=load, out=loadOrInc);
    // Or(a=loadOrReset, b=loadOrInc, out=loadIn);
    // // outReset will contain the existing value in memory or the reset value
    // Mux16(a=inMemInc, b=outReset, sel=reset, out=inMemOrIncOrReset); // choose between increased value or outReset based on reset pin
    // // inMemorIncOrReset will contain either:
    // //    (1) the existing value in memory,
    // //    (2) the increased value, or
    // //    (3) the reset value
    // Mux16(a=inMemOrIncOrReset, b=in, sel=load, out=inLoaded);        // choose between inMemorIncOrReset or the input we want to load based on load pin
    // // inLoaded will contain either inMemorIncOrReset (as described above) or the value we want to load
    // Mux16(a=inLoaded, b=inMemOrIncOrReset, sel=reset, out=inMain1);  // choose between inLoaded or the value in inMemOrIncOrReset
    // Mux16(a=inMemInc, b=inMain1, sel=loadIn, out=inMain);            // finally we need to choose between the increased value or inMain1
    // // inMain will contain the final value we need to feed in the register
    // // need out to be connected to to pins, inMem and out.
    // Register(in=inMain, load=loadIn, out=inMem, out=out);

}
