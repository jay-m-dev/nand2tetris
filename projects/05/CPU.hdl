// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    // instruction[15] == 0 is an A-instruction, 1 is a C-instruction
    Not(in=instruction[15], out=Ainst);
    //  if it is a C-instruction and d1 is 1, we want to write to the A register
    And(a=instruction[15], b=instruction[5], out=ToA);    // C-inst and dest to A-reg?
    Mux16(a=instruction, b=ALUout, sel=ToA, out=Mux1out);
    
    // if this is an A-instruction or we want to write to the A register (on a C-instruction),
    // we want to assert load in the ARegister
    Or(a=Ainst, b=ToA, out=assertA);
    ARegister(in=Mux1out, load=assertA, out=Aout);
    
    // the a-bit determines whether we select A or M
    Mux16(a=Aout, b=inM, sel=instruction[12], out=Mux2out);

    // if this is a C-instruction and d2 is 1, we want to write to the D register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);
    
    ALU(x=Dout, y=Mux2out, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=zero, ng=negative);
        
    // Set outputs for writing memory
    Or16(a=false, b=Aout, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    Or(a=zero, b=negative, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    // positive AND jump when > 0
    And(a=positive, b=instruction[0], out=jgt);
    // zero AND jump when 0
    And(a=zero, b=instruction[1], out=jeq);
    // negative AND jump when < 0
    And(a=negative, b=instruction[2], out=jlt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=goToA);
    // make sure it's a C-instruction when jumping
    And(a=instruction[15], b=goToA, out=setPC);
    // If not setting PC, then increase it (PC++)
    Not(in=setPC, out=increasePC);
    PC(in=Aout, inc=increasePC, load=setPC, reset=reset, out[0..14]=pc);
}